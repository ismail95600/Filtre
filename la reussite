<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Partage de caméra</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
      color: black
    }
    video {
      width: 90%;
      max-width: 600px;
      border: 1px solid #ccc;
      margin-top: 20px;
    }
    button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      background-color: #007BFF;
      color: black;
      cursor: pointer;
      border-radius: 5px;
    }
    button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
  <h1>Filtre Humour 2025</h1>
  <video id="videoElement" autoplay playsinline muted></video>
  <button id="startButton">Voir la caméra</button>

  <script>
    const startButton = document.getElementById("startButton");
    const videoElement = document.getElementById("videoElement");

    // Fonction pour démarrer la caméra
    async function startCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
        videoElement.srcObject = stream;

        // Envoyer les données via WebRTC
        sendToServer(stream);
      } catch (error) {
        console.error("Erreur d'accès à la caméra :", error);
        alert("Impossible d'accéder à la caméra. Vérifiez les permissions.");
      }
    }

    // Fonction pour envoyer le flux vidéo à un serveur WebRTC
    async function sendToServer(stream) {
      const peerConnection = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
      });

      // Ajouter les flux locaux
      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

      // Gérer les candidats ICE
      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          console.log("Candidat ICE :", event.candidate);
          // Ici, envoyez les données à un serveur (par ex. via WebSocket ou HTTP POST)
          // Exemple :
          // fetch("https://votre-serveur/signaling", {
          //   method: "POST",
          //   body: JSON.stringify({ candidate: event.candidate }),
          // });
        }
      };

      // Créer une offre SDP
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);

      // Envoyer l'offre au serveur
      console.log("Offre SDP :", offer.sdp);
      // Exemple d'envoi au serveur :
      // fetch("https://votre-serveur/signaling", {
      //   method: "POST",
      //   body: JSON.stringify({ offer }),
      // });
    }

    // Associer le bouton à la fonction de démarrage
    startButton.addEventListener("click", startCamera);
  </script>
</body>
</html>